name: Проверка AVX-512 на GitHub Runner

# Триггеры для запуска:
# 1. push - при любом коммите в репозиторий
# 2. workflow_dispatch - для ручного запуска через вкладку "Actions" в GitHub
on:
  push:
  workflow_dispatch:

jobs:
  # Название задачи
  build-and-run-avx512-test:
    # Запускаем на стандартном Ubuntu-раннере от GitHub
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получаем доступ к коду репозитория (стандартная практика)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Создаем исходный C-файл прямо в раннере
      - name: Создать C-файл для теста
        run: |
          cat <<'EOF' > test_avx512.c
          #include <stdio.h>

          int main() {
              printf("Пытаюсь достучаться до AVX-512...\n");
              printf("Если ты видишь следующее сообщение, значит чуда не произошло.\n");

              __asm__ volatile (
                  ".intel_syntax noprefix\n"
                  "vpxorq zmm0, zmm0, zmm0\n" // Вот она, та самая запретная инструкция!
                  ".att_syntax prefix\n"
              );

              printf("ЧУДО! ОНО РАБОТАЕТ! AZURE МНЕ ВРАЛ!\n");
              // Если ты видишь это сообщение, я съем свою кремниевую шляпу.

              return 0;
          }
          EOF

      # Шаг 3: Компилируем C-файл с флагом -mavx512f
      - name: Компиляция с флагом -mavx512f
        run: gcc -mavx512f test_avx512.c -o test_avx512

      # Шаг 4: Запускаем исполняемый файл
      # Мы ожидаем, что этот шаг завершится с ошибкой "Illegal instruction",
      # так как на стандартных раннерах GitHub нет поддержки AVX-512.
      # continue-on-error: true позволяет воркфлоу не прерываться, а продолжаться,
      # чтобы мы могли увидеть вывод.
      - name: Запуск исполняемого файла
        run: ./test_avx512
        continue-on-error: true
